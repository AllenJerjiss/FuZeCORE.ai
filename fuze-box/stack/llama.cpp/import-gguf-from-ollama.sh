#!/usr/bin/env bash
# import-gguf-from-ollama.sh — Import GGUFs from Ollama models and build a mapping for llama.cpp
# - Enumerates models from an Ollama daemon and runs `ollama export` for those
#   that can be exported to GGUF
# - Writes GGUF files into a destination directory (default: /FuZe/models/gguf)
# - Optionally generates an env file with LLAMACPP_PATH_<alias>=<gguf_path>
# - Skips known benchmark variants (name pattern: -nvidia-...-ngNN) by default

set -euo pipefail

DEST_DIR="${DEST_DIR:-/FuZe/models/gguf}"
HOST="${HOST:-127.0.0.1:11434}"
INCLUDE_RE="${INCLUDE_RE:-}"
EXCLUDE_RE="${EXCLUDE_RE:-}"
SKIP_VARIANTS="${SKIP_VARIANTS:-1}"
OVERWRITE="${OVERWRITE:-0}"
DRY_RUN="${DRY_RUN:-0}"
ENV_OUT="${ENV_OUT:-}"
LOG_DIR="${LOG_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)/logs}"
OLLAMA_BIN="${OLLAMA_BIN:-$(command -v ollama || true)}"

usage(){
  cat <<USAGE
Usage: $(basename "$0") [--dest DIR] [--host HOST:PORT] [--include REGEX] [--exclude REGEX]
                        [--no-skip-variants] [--overwrite] [--dry-run] [--env-out FILE]

Options:
  --dest DIR            Destination directory for GGUFs (default: $DEST_DIR)
  --host HOST:PORT      Ollama host:port to query/export from (default: $HOST)
  --include REGEX       Only export models matching this regex (optional)
  --exclude REGEX       Exclude models matching this regex (optional)
  --no-skip-variants    Include bench variants (default skips -nvidia-...-ngNN)
  --overwrite           Overwrite existing GGUF files (default: skip if exists)
  --dry-run             Print planned actions without exporting
  --env-out FILE        Write LLAMACPP_PATH_<alias>=<path> lines to FILE
                        (default: fuze-box/stack/llama.cpp/models.env)
USAGE
}

while [ $# -gt 0 ]; do
  case "$1" in
    --dest) DEST_DIR="$2"; shift 2;;
    --host) HOST="$2"; shift 2;;
    --include) INCLUDE_RE="$2"; shift 2;;
    --exclude) EXCLUDE_RE="$2"; shift 2;;
    --no-skip-variants) SKIP_VARIANTS=0; shift;;
    --overwrite) OVERWRITE=1; shift;;
    --dry-run) DRY_RUN=1; shift;;
    --env-out) ENV_OUT="$2"; shift 2;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown arg: $1" >&2; usage; exit 2;;
  esac
done

if [ -z "${OLLAMA_BIN:-}" ] || [ ! -x "$OLLAMA_BIN" ]; then
  echo "✖ 'ollama' not found. Set OLLAMA_BIN or install Ollama." >&2
  exit 1
fi

mkdir -p "$DEST_DIR" "$LOG_DIR"
TS="$(date +%Y%m%d_%H%M%S)"
CSV_OUT="${LOG_DIR}/ollama_export_${TS}.csv"
echo "model_tag,gguf_path,size_bytes,host,status" > "$CSV_OUT"

base_alias(){ echo "$1" | sed -E 's#[/:]+#-#g'; }
env_key(){ echo "$1" | tr -c '[:alnum:]' '_' ; }

list_models(){
  OLLAMA_HOST="http://${HOST}" "$OLLAMA_BIN" list 2>/dev/null | awk 'NR>1 && $1!=""{print $1}'
}

should_keep(){
  local name="$1"
  if [ -n "$INCLUDE_RE" ] && ! echo "$name" | grep -Eq "$INCLUDE_RE"; then return 1; fi
  if [ -n "$EXCLUDE_RE" ] && echo "$name" | grep -Eq "$EXCLUDE_RE"; then return 1; fi
  if [ "$SKIP_VARIANTS" -eq 1 ] && echo "$name" | grep -Eq -- '-nvidia-[a-z0-9]+(super|ti)?-ng[0-9]+(:|$)'; then return 1; fi
  return 0
}

export_one(){ # model_tag -> status
  local tag="$1" alias out tmp dest rc size
  alias="$(base_alias "$tag")"
  dest="${DEST_DIR}/${alias}.gguf"
  if [ -e "$dest" ] && [ "$OVERWRITE" -ne 1 ]; then
    echo "SKIP existing: $dest"
    size="$(stat -c '%s' "$dest" 2>/dev/null || echo 0)"
    echo "$tag,$dest,$size,$HOST,exists" >> "$CSV_OUT"
    return 0
  fi
  if [ "$DRY_RUN" -eq 1 ]; then
    echo "DRY export: $tag -> $dest"
    echo "$tag,$dest,0,$HOST,dry-run" >> "$CSV_OUT"
    return 0
  fi
  tmp="${dest}.tmp"
  if OLLAMA_HOST="http://${HOST}" "$OLLAMA_BIN" export "$tag" > "$tmp" 2>/dev/null; then
    mv -f "$tmp" "$dest"
    size="$(stat -c '%s' "$dest" 2>/dev/null || echo 0)"
    echo "OK  export: $tag -> $dest (${size} bytes)"
    echo "$tag,$dest,$size,$HOST,exported" >> "$CSV_OUT"
    return 0
  else
    rc=$?
    rm -f "$tmp" 2>/dev/null || true
    echo "NO  export: $tag (ollama export failed, rc=$rc)"
    echo "$tag,$dest,0,$HOST,failed" >> "$CSV_OUT"
    return 1
  fi
}

ENV_OUT_DEFAULT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)/llama.cpp/models.env"
[ -z "$ENV_OUT" ] && ENV_OUT="$ENV_OUT_DEFAULT"
echo "# Autogenerated $(date -Iseconds) from $(basename "$0")" > "$ENV_OUT"

count=0; kept=0; exp_ok=0; exp_fail=0
while IFS= read -r tag; do
  [ -n "$tag" ] || continue
  count=$((count+1))
  if should_keep "$tag"; then
    kept=$((kept+1))
    if export_one "$tag"; then
      alias="$(base_alias "$tag")"
      key="LLAMACPP_PATH_$(env_key "$alias")"
      echo "export ${key}=${DEST_DIR}/${alias}.gguf" >> "$ENV_OUT"
      exp_ok=$((exp_ok+1))
    else
      exp_fail=$((exp_fail+1))
    fi
  fi
done < <(list_models)

echo
echo "Summary: found=$count kept=$kept exported=$exp_ok failed=$exp_fail"
echo "CSV: $CSV_OUT"
echo "llama.cpp env mappings: $ENV_OUT"
