#!/usr/bin/env bash
# replace-block — robust, inclusive line-anchored replacement
# Usage:
#   replace-block <target> <start_re> <end_re> <replacement_file> <backup_suffix>
# Env (optional):
#   RB_PRINT=1               # show before/after snippets
#   VALIDATE_CMD="bash -n"   # validation shell command

set -euo pipefail

if (( $# < 5 )); then
  echo "usage: $0 <target> <start_re> <end_re> <replacement_file> <backup_suffix>" >&2
  exit 2
fi

TARGET="$1"; START_RE="$2"; END_RE="$3"; REPL_FILE="$4"; BAK="$5"

[[ -f "$TARGET"    ]] || { echo "No target: $TARGET" >&2; exit 2; }
[[ -f "$REPL_FILE" ]] || { echo "No replacement file: $REPL_FILE" >&2; exit 2; }

# Find unique start line
mapfile -t START_MATCHES < <(grep -nE -- "$START_RE" "$TARGET" || true)
if (( ${#START_MATCHES[@]} == 0 )); then
  echo "No match for start in $TARGET" >&2; exit 3
fi
if (( ${#START_MATCHES[@]} > 1 )); then
  echo "Start anchor matches ${#START_MATCHES[@]} times (expected 1)" >&2
  printf '%s\n' "${START_MATCHES[@]}" >&2
  exit 3
fi
START_LN="${START_MATCHES[0]%%:*}"

# Find first end match AFTER start, using sed+grep for robust ERE handling
REL_END="$(sed -n "${START_LN},\$p" "$TARGET" | grep -nE -- "$END_RE" | head -n1 | cut -d: -f1 || true)"
if [[ -z "$REL_END" ]]; then
  echo "No match for end after start (start at line $START_LN)" >&2
  exit 3
fi
END_LN="$(( START_LN + REL_END - 1 ))"

# Preview BEFORE
if [[ "${RB_PRINT:-0}" == "1" ]]; then
  echo "[replace-block] BEFORE (lines ${START_LN}..${END_LN}):"
  nl -ba "$TARGET" | sed -n "${START_LN},${END_LN}p"
fi

TMP_OUT="$(mktemp)"
trap 'rm -f "$TMP_OUT"' EXIT

# Compose: [1..START-1] + replacement + [END+1..EOF]
{
  if (( START_LN > 1 )); then sed -n "1,$((START_LN-1))p" "$TARGET"; fi
  cat "$REPL_FILE"
  sed -n "$((END_LN+1)),\$p" "$TARGET"
} > "$TMP_OUT"

# Backup (preserve metadata)
cp -p -- "$TARGET" "${TARGET}${BAK}"

# Write back in-place to preserve mode/owner
cat "$TMP_OUT" > "$TARGET"

# Optional validation
if [[ -n "${VALIDATE_CMD:-}" ]]; then
  if ! bash -lc "$VALIDATE_CMD \"$TARGET\""; then
    echo "[replace-block] validation failed — restoring ${TARGET}${BAK}" >&2
    cat "${TARGET}${BAK}" > "$TARGET"
    exit 4
  fi
fi

# Preview AFTER
if [[ "${RB_PRINT:-0}" == "1" ]]; then
  NEW_START="$(grep -nE -- "$START_RE" "$TARGET" | cut -d: -f1 | head -n1 || true)"
  if [[ -n "$NEW_START" ]]; then
    REL_END2="$(sed -n "${NEW_START},\$p" "$TARGET" | grep -nE -- "$END_RE" | head -n1 | cut -d: -f1 || true)"
    if [[ -n "$REL_END2" ]]; then
      NEW_END="$(( NEW_START + REL_END2 - 1 ))"
      echo "[replace-block] AFTER (lines ${NEW_START}..${NEW_END}):"
      nl -ba "$TARGET" | sed -n "${NEW_START},${NEW_END}p"
    fi
  fi
fi

echo "[replace-block] done. backup at: ${TARGET}${BAK}"

